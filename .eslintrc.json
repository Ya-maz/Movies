{
  "env": {
    "browser": true,
    "node": true,
    "jest/globals": true
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "react-hooks",
    "jsdoc",
    "import",
    "@typescript-eslint",
    "jest",
    "prettier"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "plugin:jest/recommended",
    "plugin:import/typescript",
    "prettier"
  ],
  "ignorePatterns": [
    "node_modules/**/*.*",
    "*.module.less.d.ts",
    "*.less",
    "schema.json",
    "schema.graphql",
    "src/@types/**",
    "src/deps-api/graphql/__generated__/**"
  ],
  "rules": {
    "linebreak-style": 0,
    "no-useless-catch": "error",
    "no-prototype-builtins": "off",
    "curly": [
      "error",
      "multi-line"
    ],
    "eqeqeq": [
      "error",
      "smart"
    ],
    "guard-for-in": "error",
    "id-match": "error",
    "max-classes-per-file": [
      "error",
      1
    ],
    "no-bitwise": "error",
    "no-caller": "error",
    "no-duplicate-imports": "error",
    "no-eval": "error",
    "no-irregular-whitespace": "off",
    "no-fallthrough": "error",
    "no-new-wrappers": "error",
    "no-throw-literal": "error",
    "no-undef-init": "error",
    "no-var": "error",
    "object-shorthand": "error",
    "prefer-const": "error",
    "radix": [
      "error",
      "as-needed"
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "line": {
          "markers": [
            "/"
          ]
        },
        "block": {
          "balanced": true
        }
      }
    ],
    "valid-typeof": "off",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-definitions": "off",
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/member-ordering": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-param-reassign": "off",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        "allowTernary": true
      }
    ],
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/quotes": "off",
    "@typescript-eslint/restrict-plus-operands": "error",
    "@typescript-eslint/semi": [
      "error",
      "always"
    ],
    "@typescript-eslint/type-annotation-spacing": "off",
    "@typescript-eslint/unbound-method": "off",
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "explicit"
      }
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE",
          "snake_case"
        ],
        "leadingUnderscore": "allowSingleOrDouble"
      }
    ],
    "@typescript-eslint/no-shadow": [
      "error",
      { "builtinGlobals": false, "hoist": "functions", "allow": [] }
    ],
    "@typescript-eslint/restrict-template-expressions": [
      "off",
      {
        "allowAny": true,
        "allowNullish": true
      }
    ],
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        "path": "always",
        "types": "prefer-import",
        "lib": "always"
      }
    ],
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array"
      }
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": {
            "message": "Avoid using the `Object` type. Did you mean `object`?"
          },
          "Function": {
            "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
          },
          "Number": {
            "message": "Avoid using the `Number` type. Did you mean `number`?"
          },
          "String": {
            "message": "Avoid using the `String` type. Did you mean `string`?"
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
          }
        }
      }
    ],
    "import/no-unresolved": "off",
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          [
            "sibling",
            "index"
          ],
          "unknown"
        ]
      }
    ],
    "jsdoc/check-alignment": "error",
    "jsdoc/check-indentation": "error",
    "jsdoc/newline-after-description": "error",
    "react/display-name": "off",
    "react/jsx-boolean-value": [
      "error",
      "always"
    ],
    "react/no-unescaped-entities": [
      "error",
      {
        "forbid": [
          {
            "char": "\"",
            "alternatives": [
              "&quot;"
            ]
          },
          {
            "char": ">",
            "alternatives": [
              "&gt;"
            ]
          },
          {
            "char": "'",
            "alternatives": [
              "&apos;"
            ]
          },
          {
            "char": "}",
            "alternatives": [
              "&#125;"
            ]
          },
          {
            "char": "{",
            "alternatives": [
              "&#123;"
            ]
          }
        ]
      }
    ],
    "react/prop-types": "off",
    "react/self-closing-comp": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error"
  }
}